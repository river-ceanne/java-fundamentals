/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {

    // Rolling Dice
    // Write a method called roll that accepts an integer n and rolls a six-sided dice n times.
    // The method should return an array containing the values of the rolls.
    public static int[] roll(int n){
        int[] rolls = new int[n];
        for(int i = 0; i < n; i++){
            rolls[i] =  (int)(Math.random() * (6 + 1));
        }
        return rolls;
    }

    // Contains Duplicates
    // Write a method called containsDuplicates that returns true or false depending
    // on whether the array contains duplicate values.
    public static boolean containsDuplicates(int[] arr){

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                if(arr[i] == arr[j] && i != j) return true;
            }
        }
        return false;
    }

    // Calculating Averages
    // Write a method that accepts an array of integers and calculates and returns
    // the average of all the values in the array.
    public static double calculateAvg(int[] arr){
        double avg;
        double sum = 0;
        for (int val: arr) {
            sum += (double) val;
        }
        avg = sum / arr.length;
        return  avg;
    }

    // Arrays of Arrays
    // Given an array of arrays calculate the average value for each array and return the array with the lowest average.
    public static double lowestAvg(int[][] arr){
        double lowestAvg = Double.MAX_VALUE;
        double sum = 0;

        for (int[] innerArr: arr) {
            for (int val: innerArr) {
                sum += (double) val;
            }
            double currAvg = sum / innerArr.length;
            if(currAvg < lowestAvg) lowestAvg = currAvg;
            sum = 0;
        }
        return lowestAvg;

    }

    // Analyzing Weather Data
    // Use the October Seattle weather data above. Iterate through all of the data to find the min and max values.
    // Use a HashSet of type Integer to keep track of all the unique temperatures seen.
    // Finally, iterate from the min temp to the max temp and print out any temperature not seen during the month.
    public static void analyzeWeatherData(int[][] weatherData){
        HashSet<Integer> temps = new HashSet<>();
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;

        for(int[] weekly: weatherData){
            for(int daily: weekly){
                temps.add(daily);
                if(daily < min) min = daily;
                if(daily > max) max = daily;
            }
        }

        List<Integer> notIncluded = new ArrayList<>();

        for (int i = min; i < max; i++) {
            if(!temps.contains(i)) notIncluded.add(i);
        }

        String concats = "";
        for(Integer i: notIncluded){
            concats += String.format("Never saw temperature: %d\n",i);
        }

        System.out.println(String.format("High: %d\nLow:%d\n%s",max,min,concats));

    }

    // Tallying Election
    // Write a function called tally that accepts a List of Strings representing votes and returns one string to
    // show what got the most votes.
    public static String tally(List<String> stringList){
        HashMap<String,Integer> tallyList = new HashMap<>();
        for (String vote: stringList) {
            if (tallyList.containsKey(vote)) {
                tallyList.put(vote, tallyList.get(vote)+1);
            } else {
                tallyList.put(vote,1);
            }
        }

        return Collections.max(tallyList.entrySet(), Map.Entry.comparingByValue()).getKey();

    }

}
